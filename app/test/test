'use client';
import React, { useState } from 'react';
import { 
  FileText, 
  User, 
  Mail, 
  MapPin, 
  Calendar, 
  Search, 
  Plus, 
  Edit3, 
  Trash2, 
  Eye, 
  Download, 
  Upload,
  Filter,
  RefreshCw,
  Settings,
  ChevronDown,
  Menu,
  X
} from 'lucide-react';

export default function DepartmentalLetters() {
  const [selectedTab, setSelectedTab] = useState('Tax');
  const [partyCode, setPartyCode] = useState('127');
  const [partyName, setPartyName] = useState('Abha Gaur');
  const [address, setAddress] = useState('35 Khurjey Wala Mohalla, Khurjey Wala Mohalla, Lashker, Gwalior, MADHYA PRADESH, INDIA, 474001');
  const [email, setEmail] = useState('drpukhraj@gmail.com');
  const [selectedRefund, setSelectedRefund] = useState('Refund');
  const [assYear, setAssYear] = useState('2026 - 2027');
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);
  const [activeFilter, setActiveFilter] = useState({ assYear: 'All', software: 'All', nature: 'All' });

  const tabs = [
    { id: 'Tax', label: 'Tax', icon: FileText },
    { id: 'Tds', label: 'TDS', icon: FileText },
    { id: 'Serve', label: 'Serve', icon: FileText },
    { id: 'Val', label: 'Validation', icon: FileText },
    { id: 'Roc', label: 'ROC', icon: FileText },
    { id: 'GST', label: 'GST', icon: FileText }
  ];

  const refundOptions = [
    'Refund',
    'Refund Reminder', 
    'Revalidation'
  ];

  const quickActions = [
    { id: 'refund', label: 'Refund', color: 'bg-blue-500 hover:bg-blue-600' },
    { id: 'stay', label: 'Stay', color: 'bg-green-500 hover:bg-green-600' },
    { id: 'will_dead', label: 'Will Dead', color: 'bg-orange-500 hover:bg-orange-600' },
    { id: 'early_fixation', label: 'Early Fixation', color: 'bg-purple-500 hover:bg-purple-600' },
    { id: 'general', label: 'General', color: 'bg-gray-500 hover:bg-gray-600' },
    { id: 'assessment', label: 'Assessment', color: 'bg-indigo-500 hover:bg-indigo-600' }
  ];

  const documents = [
    {
      id: 1,
      createdOn: '2025-01-15',
      nature: 'Refund',
      fileName: 'Refund_Request_127.pdf',
      filedDate: '2025-01-16',
      assessmentYear: '2026-27',
      software: 'CompuTax',
      status: 'Pending'
    },
    {
      id: 2,
      createdOn: '2025-01-10',
      nature: 'Assessment',
      fileName: 'Assessment_Notice_127.pdf',
      filedDate: '2025-01-12',
      assessmentYear: '2026-27',
      software: 'CompuTax',
      status: 'Completed'
    }
  ];

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 to-slate-100">
      {/* Header */}
      <header className="bg-white shadow-lg border-b border-slate-200">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center h-16">
            {/* Logo/Title */}
            <div className="flex items-center space-x-4">
              <FileText className="h-8 w-8 text-blue-600" />
              <div>
                <h1 className="text-xl font-bold text-slate-900">Departmental Letters</h1>
                <p className="text-sm text-slate-500">CompuTax Management System</p>
              </div>
            </div>

            {/* Mobile menu button */}
            <button
              onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}
              className="lg:hidden p-2 rounded-md text-slate-600 hover:bg-slate-100"
            >
              {isMobileMenuOpen ? <X className="h-6 w-6" /> : <Menu className="h-6 w-6" />}
            </button>

            {/* Desktop Navigation */}
            <nav className="hidden lg:flex space-x-1">
              {tabs.map((tab, index) => {
                const Icon = tab.icon;
                return (
                  <button
                    key={tab.id}
                    onClick={() => setSelectedTab(tab.id)}
                    className={`flex items-center px-4 py-2 rounded-lg font-medium transition-all duration-200 ${
                      selectedTab === tab.id
                        ? 'bg-blue-600 text-white shadow-lg transform scale-105'
                        : 'text-slate-600 hover:bg-slate-100 hover:text-slate-900'
                    }`}
                  >
                    <Icon className="h-4 w-4 mr-2" />
                    <span className="hidden xl:inline">{tab.label}</span>
                    <span className="xl:hidden">{index + 1}</span>
                  </button>
                );
              })}
            </nav>
          </div>

          {/* Mobile Navigation */}
          {isMobileMenuOpen && (
            <div className="lg:hidden py-4 border-t border-slate-200">
              <div className="grid grid-cols-3 gap-2">
                {tabs.map((tab, index) => {
                  const Icon = tab.icon;
                  return (
                    <button
                      key={tab.id}
                      onClick={() => {
                        setSelectedTab(tab.id);
                        setIsMobileMenuOpen(false);
                      }}
                      className={`flex flex-col items-center p-3 rounded-lg font-medium transition-all duration-200 ${
                        selectedTab === tab.id
                          ? 'bg-blue-600 text-white'
                          : 'text-slate-600 hover:bg-slate-100'
                      }`}
                    >
                      <Icon className="h-5 w-5 mb-1" />
                      <span className="text-sm">{tab.label}</span>
                    </button>
                  );
                })}
              </div>
            </div>
          )}
        </div>
      </header>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
        <div className="grid grid-cols-1 xl:grid-cols-3 gap-6">
          {/* Left Panel - Party Details & Controls */}
          <div className="xl:col-span-1 space-y-6">
            {/* Party Details Card */}
            <div className="bg-white rounded-xl shadow-lg border border-slate-200 overflow-hidden">
              <div className="bg-gradient-to-r from-blue-600 to-blue-700 px-6 py-4">
                <h2 className="text-lg font-semibold text-white flex items-center">
                  <User className="h-5 w-5 mr-2" />
                  Party Details
                </h2>
              </div>
              
              <div className="p-6 space-y-4">
                <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-slate-700 mb-2">
                      Party Code
                    </label>
                    <div className="flex rounded-lg shadow-sm">
                      <input
                        value={partyCode}
                        onChange={(e) => setPartyCode(e.target.value)}
                        className="block w-full rounded-l-md border-slate-300 focus:border-blue-500 focus:ring-blue-500 sm:text-sm"
                      />
                      <button className="relative -ml-px inline-flex items-center px-3 py-2 rounded-r-md border border-slate-300 bg-slate-50 text-sm font-medium text-slate-700 hover:bg-slate-100">
                        <Search className="h-4 w-4" />
                      </button>
                    </div>
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium text-slate-700 mb-2">
                      Assessment Year
                    </label>
                    <select 
                      value={assYear}
                      onChange={(e) => setAssYear(e.target.value)}
                      className="block w-full rounded-md border-slate-300 focus:border-blue-500 focus:ring-blue-500 sm:text-sm"
                    >
                      <option>2026 - 2027</option>
                      <option>2025 - 2026</option>
                      <option>2024 - 2025</option>
                    </select>
                  </div>
                </div>

                <div>
                  <label className="block text-sm font-medium text-slate-700 mb-2">
                    Party Name
                  </label>
                  <p className="text-slate-900 font-medium bg-slate-50 p-3 rounded-lg">{partyName}</p>
                </div>

                <div>
                  <label className="block text-sm font-medium text-slate-700 mb-2 flex items-center">
                    <MapPin className="h-4 w-4 mr-1" />
                    Address
                  </label>
                  <p className="text-slate-600 text-sm bg-slate-50 p-3 rounded-lg leading-relaxed">{address}</p>
                </div>

                <div>
                  <label className="block text-sm font-medium text-slate-700 mb-2 flex items-center">
                    <Mail className="h-4 w-4 mr-1" />
                    Email Address
                  </label>
                  <p className="text-blue-600 font-medium bg-slate-50 p-3 rounded-lg">{email}</p>
                </div>
              </div>
            </div>

            {/* Quick Actions */}
            <div className="bg-white rounded-xl shadow-lg border border-slate-200 overflow-hidden">
              <div className="bg-gradient-to-r from-green-600 to-green-700 px-6 py-4">
                <h2 className="text-lg font-semibold text-white flex items-center">
                  <Settings className="h-5 w-5 mr-2" />
                  Quick Actions
                </h2>
              </div>
              
              <div className="p-6">
                <div className="grid grid-cols-2 sm:grid-cols-3 gap-3 mb-6">
                  {quickActions.map((action) => (
                    <button
                      key={action.id}
                      className={`${action.color} text-white px-4 py-3 rounded-lg font-medium text-sm transition-all duration-200 transform hover:scale-105 shadow-md hover:shadow-lg`}
                    >
                      {action.label}
                    </button>
                  ))}
                </div>

                <div className="border-t border-slate-200 pt-6">
                  <label className="block text-sm font-medium text-slate-700 mb-2">
                    Document Type
                  </label>
                  <select
                    value={selectedRefund}
                    onChange={(e) => setSelectedRefund(e.target.value)}
                    className="block w-full rounded-md border-slate-300 focus:border-blue-500 focus:ring-blue-500 sm:text-sm mb-4"
                  >
                    {refundOptions.map((option) => (
                      <option key={option} value={option}>{option}</option>
                    ))}
                  </select>

                  <div className="flex flex-wrap gap-2">
                    <button className="flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors">
                      <Plus className="h-4 w-4 mr-2" />
                      New
                    </button>
                    <button className="flex items-center px-4 py-2 bg-orange-600 text-white rounded-lg hover:bg-orange-700 transition-colors">
                      <Edit3 className="h-4 w-4 mr-2" />
                      Modify
                    </button>
                    <button className="flex items-center px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors">
                      <Trash2 className="h-4 w-4 mr-2" />
                      Delete
                    </button>
                  </div>
                </div>
              </div>
            </div>
          </div>

          {/* Right Panel - Documents */}
          <div className="xl:col-span-2">
            <div className="bg-white rounded-xl shadow-lg border border-slate-200 overflow-hidden">
              {/* Header */}
              <div className="bg-gradient-to-r from-purple-600 to-purple-700 px-6 py-4">
                <h2 className="text-lg font-semibold text-white flex items-center">
                  <FileText className="h-5 w-5 mr-2" />
                  Documents Management
                </h2>
              </div>

              {/* Filters */}
              <div className="border-b border-slate-200 p-6">
                <div className="grid grid-cols-1 sm:grid-cols-3 gap-4">
                  {['Assessment Year', 'Software', 'Nature'].map((filterType) => (
                    <div key={filterType} className="bg-slate-50 p-4 rounded-lg">
                      <h3 className="font-medium text-slate-900 mb-3 flex items-center">
                        <Filter className="h-4 w-4 mr-2" />
                        {filterType}
                      </h3>
                      <div className="space-y-2">
                        <label className="flex items-center">
                          <input type="radio" name={filterType} defaultChecked className="text-blue-600 focus:ring-blue-500" />
                          <span className="ml-2 text-sm text-slate-700">All</span>
                        </label>
                        <label className="flex items-center">
                          <input type="radio" name={filterType} className="text-blue-600 focus:ring-blue-500" />
                          <span className="ml-2 text-sm text-slate-700">Selected</span>
                        </label>
                      </div>
                    </div>
                  ))}
                </div>
              </div>

              {/* Documents Table */}
              <div className="overflow-x-auto">
                <table className="min-w-full divide-y divide-slate-200">
                  <thead className="bg-slate-50">
                    <tr>
                      {['Created On', 'Nature', 'File Name', 'Filed Date', 'A.Y.', 'Software', 'Status'].map((header) => (
                        <th key={header} className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">
                          {header}
                        </th>
                      ))}
                    </tr>
                  </thead>
                  <tbody className="bg-white divide-y divide-slate-200">
                    {documents.map((doc) => (
                      <tr key={doc.id} className="hover:bg-slate-50 transition-colors">
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-slate-900">
                          <div className="flex items-center">
                            <Calendar className="h-4 w-4 mr-2 text-slate-400" />
                            {doc.createdOn}
                          </div>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap">
                          <span className="inline-flex px-2 py-1 text-xs font-semibold rounded-full bg-blue-100 text-blue-800">
                            {doc.nature}
                          </span>
                        </td>
                        <td className="px-6 py-4 text-sm text-slate-900">{doc.fileName}</td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-slate-900">{doc.filedDate}</td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-slate-900">{doc.assessmentYear}</td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-slate-900">{doc.software}</td>
                        <td className="px-6 py-4 whitespace-nowrap">
                          <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${
                            doc.status === 'Completed' ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800'
                          }`}>
                            {doc.status}
                          </span>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>

              {/* Bottom Controls */}
              <div className="border-t border-slate-200 p-6">
                <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                  {/* Date Controls */}
                  <div className="space-y-4">
                    <div className="flex flex-col sm:flex-row sm:items-center sm:space-x-4">
                      <label className="text-sm font-medium text-slate-700 whitespace-nowrap">
                        Creation Date:
                      </label>
                      <input type="date" className="mt-1 sm:mt-0 block rounded-md border-slate-300 focus:border-blue-500 focus:ring-blue-500 sm:text-sm" />
                      <button className="mt-2 sm:mt-0 inline-flex items-center px-3 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700">
                        <RefreshCw className="h-4 w-4 mr-2" />
                        Update
                      </button>
                    </div>
                    
                    <div className="flex flex-col sm:flex-row sm:items-center sm:space-x-4">
                      <label className="text-sm font-medium text-slate-700 whitespace-nowrap">
                        Filing Date:
                      </label>
                      <input type="date" className="mt-1 sm:mt-0 block rounded-md border-slate-300 focus:border-blue-500 focus:ring-blue-500 sm:text-sm" />
                      <button className="mt-2 sm:mt-0 inline-flex items-center px-3 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-green-600 hover:bg-green-700">
                        <Upload className="h-4 w-4 mr-2" />
                        Filed
                      </button>
                    </div>
                  </div>

                  {/* Action Buttons */}
                  <div className="space-y-4">
                    <h3 className="text-lg font-semibold text-slate-900 text-center">Document Actions</h3>
                    <div className="grid grid-cols-2 sm:grid-cols-4 gap-2">
                      {[
                        { label: 'Create', icon: Plus, color: 'bg-blue-600 hover:bg-blue-700' },
                        { label: 'Print', icon: FileText, color: 'bg-green-600 hover:bg-green-700' },
                        { label: 'Preview', icon: Eye, color: 'bg-purple-600 hover:bg-purple-700' },
                        { label: 'Edit', icon: Edit3, color: 'bg-orange-600 hover:bg-orange-700' },
                        { label: 'Delete', icon: Trash2, color: 'bg-red-600 hover:bg-red-700' },
                        { label: 'Email', icon: Mail, color: 'bg-indigo-600 hover:bg-indigo-700' },
                        { label: 'Export', icon: Download, color: 'bg-teal-600 hover:bg-teal-700' },
                        { label: 'Upload', icon: Upload, color: 'bg-cyan-600 hover:bg-cyan-700' }
                      ].map((action) => {
                        const Icon = action.icon;
                        return (
                          <button
                            key={action.label}
                            className={`${action.color} text-white px-3 py-2 rounded-lg font-medium text-xs transition-all duration-200 transform hover:scale-105 shadow-md hover:shadow-lg flex items-center justify-center`}
                          >
                            <Icon className="h-3 w-3 mr-1" />
                            {action.label}
                          </button>
                        );
                      })}
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

Refund
Gift_Deed
Stay
Appeal Effect
Will_Deed
154_Application
Early_Fixation
Authority
General
Calculation
Adjourment
Affidavit
Partnership/Turst_Deed
Assessment